<?php
/**
 * @file
 * Code for the Thisted event import feature.
 */

include_once 'thisted_event_import.features.inc';

/**
 * Implements hook_menu().
 */
function thisted_event_import_menu() {
  $items['admin/config/ting/events_import'] = array(
    'title' => 'Map organizer',
    'description' => 'Map organizer with library.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('thisted_event_import_admin_form'),
    'file' => 'thisted_event_import.admin.inc',
  );

  $items['admin/config/ting/events_import/add'] = array(
    'title' => 'Add organizer mapping.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('thisted_event_import_add_mapping'),
    'file' => 'thisted_event_import.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Implements hook_feeds_after_parse().
 */
function thisted_event_import_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  foreach ($result->items as $key => $value) {
    if ($value['xpathparser:15'] === 'true') {
      unset($result->items[$key]);
    }
  }
}

/**
 * Implements hook_feeds_presave().
 */
function thisted_event_import_feeds_presave(FeedsSource $source, $entity, $item) {
  if ($entity->type == 'ding_event') {
    $url = $price = $dates = $new_entity = NULL;
    foreach ($source->importer->processor->config['mappings'] as $map_key => $map) {
      $xpathparser_key = $map_key + 1;
      switch ($map['target']) {
        case 'title':
          // Trim title.
          $entity->title = trim($item['xpathparser:' . $xpathparser_key]);
          break;

        case 'field_ding_event_lead':
          // Trim lead.
          $entity->field_ding_event_lead[LANGUAGE_NONE][0]['value'] = trim($item['xpathparser:' . $xpathparser_key]);
          break;

        case 'field_ding_event_body':
          //Trim body.
          $entity->field_ding_event_body[LANGUAGE_NONE][0]['value'] = trim($item['xpathparser:' . $xpathparser_key]);
          break;

        case 'status':
          // Set node status.
          $entity->status = (drupal_strtolower($item['xpathparser:' . $xpathparser_key]) == 'false') ? 0 : 1;
          break;

        case 'url':
          $url = isset($item[$map['source']]) ? $item[$map['source']] : NULL;
          break;

        case 'field_ding_event_price':
          // Get only price, without text.
          $price_dirty = $item['xpathparser:' . $xpathparser_key];
          preg_match_all('/\d+/', $price_dirty, $matches);
          if (is_array($matches[0])) {
            $price_clear = is_array($matches[0]) ? (int) min($matches[0]) : 0;
            $entity->field_ding_event_price[LANGUAGE_NONE][0]['value'] = $price_clear;
            $max = (int) max($matches[0]);
            if ($price_clear != $max) {
              $price = $price_clear . ' - ' . $max;
            }
          }
          break;

        case 'field_place2book_tickets':
          if (module_exists('ding_place2book')) {
            // push event to place2book.
            if ($item['xpathparser:' . $xpathparser_key]) {
              $entity->place2book['maintain_copy'] = 1;
              $entity->place2book['kultunaut_export'] = 0;
              $entity->place2book['passive'] = 0;
              $entity->capacity = 0;
              $entity->place2book['maintain_copy'] = 0;
            }
          }
          break;

        case 'field_ding_event_date:start':
          // Set proper start date.
          $dates = thisted_event_import_date($item['xpathparser:' . $xpathparser_key]);
          break;

        case 'field_ding_event_location:name_line':
          // Import location data.
          $entity->field_ding_event_location[LANGUAGE_NONE][0] += array(
            'country' => 'DK',
            'administrative_area' => NULL,
            'sub_administrative_area' => NULL,
            'dependent_locality' => NULL,
            'premise' => '',
            'sub_premise' => NULL,
            'organisation_name' => NULL,
            'data' => NULL,
          );
          break;

        case 'field_ding_event_list_image':
          // Process attached pictures and files.
          thisted_event_import_map_files($item['xpathparser:' . $xpathparser_key], $entity);
          break;

        case 'field_ding_event_category':

          break;
      }
    }

    $entity->status = 1;
    $entity->field_ding_event_date[LANGUAGE_NONE][0]['timezone'] = 'Europe/Copenhagen';
    $entity->field_ding_event_date[LANGUAGE_NONE][0]['timezone_db'] = 'Europe/Copenhagen';
    $entity->field_ding_event_date[LANGUAGE_NONE][0]['date_type'] = 'datetime';

    if ($url) {
      $entity->field_ding_event_body[LANGUAGE_NONE][0]['value'] .= '<p>
        <a href="' . $url . '">' . t('See more') . '</a>
      </p>';
    }

    $feeds_config = $source->getConfig();
    $feeds_source = $feeds_config['FeedsHTTPFetcher']['source'];
    $mapped_libraries = variable_get('mapped_libraries', array());
    $values = NULL;
    $lib_id = NULL;
    foreach ($mapped_libraries as $library_id => $source_uri) {
      if ($source_uri == $feeds_source) {
        $values = array(
          'entity_type' => 'node',
          'entity' => $entity,
          'field_name' => 'og_group_ref',
        );
        $lib_id = $library_id;
        og_group('node', $library_id, $values);
      }
    }

    $ids = array_map(function ($i) {
      return $i['id'];
    }, $dates);
    $nids = db_select('thisted_event_dates', 't')
      ->fields('t', array('date_id', 'nid'))
      ->condition('t.date_id', $ids, 'IN')
      ->execute()
      ->fetchAllKeyed();
    foreach ($dates as $date) {
      $is_main = $date == reset($dates);
      $new_entity = $is_main ? $entity : clone $entity;
      $entity->field_ding_event_date[LANGUAGE_NONE][0]['value'] = thisted_event_import_date_format($date['date']);
      if (!empty($date['endtime'])) {
        $parts = explode(' ', $date['date']);
        $end = $parts[0] . ' ' . $date['endtime'] . ':00';
        $entity->field_ding_event_date[LANGUAGE_NONE][0]['value2'] = thisted_event_import_date_format($end);
      }
      if (isset($nids[$date['id']])) {
        $new_entity->nid = $nids[$date['id']];
      }

      if (!$is_main) {
        node_save($new_entity);
        db_merge('thisted_event_dates')
          ->key(array('nid' => $new_entity->nid))
          ->fields(array(
            'date_id' => $date['id'],
            'nid' => $new_entity->nid,
            'price' => $price,
          ))
          ->execute();
        $new_entity = null;
      }
      if (!empty($lib_id)) {
        $values['entity'] = $new_entity;
        og_group('node', $lib_id, $values);
      }
    }
  }
}

/**
 * Prepare proper date and time.
 */
function thisted_event_import_date_format($date) {
  $date_time = DateTime::createFromFormat("d/m/Y H:i:s", $date, new DateTimeZone('Europe/Copenhagen'));
  $date_time->sub(new DateInterval('PT1H'));
  $proper_date_format = $date_time->format('Y-m-d H:i:s');

  return $proper_date_format;
}

/**
 * Attaches images and files to importing event.
 * @param $xml_string string
 *  contain all files of importing event.
 * @param $entity object
 *  in which files will be added.
 */
function thisted_event_import_map_files($xml_string, &$entity) {
  $xml = new SimpleXMLElement($xml_string);

  $image_count = 0;
  foreach ($xml->file as $file) {
    // If more than one image attache them as files.
    if (filter_var($file->image, FILTER_VALIDATE_BOOLEAN) && $image_count == 0) {
      $file_url = $file->path->__toString();
      if (!empty($file_url)) {
        $image = system_retrieve_file($file_url, NULL, TRUE, FILE_EXISTS_REPLACE);
        $entity->field_ding_event_list_image[LANGUAGE_NONE][0] = (array) $image;
        $entity->field_ding_event_title_image[LANGUAGE_NONE][0] = (array) $image;
      }
      $image_count++;
    }
    else {
      $file_url = $file->path->__toString();
      if (!empty($file_url)) {
        $attached_file = system_retrieve_file($file_url, NULL, TRUE, FILE_EXISTS_REPLACE);
        $attached_file = (array) $attached_file;
        $attached_file['display'] = 1;
        $entity->field_ding_event_files[LANGUAGE_NONE][] = $attached_file;
      }
    }
  }
}

/**
 * Parse xml and gets dates.
 *
 * @param $xml_string string
 *  contain all dates ofevent.
 *
 * @return array
 *  Return array with
 */
function thisted_event_import_date($xml_string) {
  $xml = new SimpleXMLElement($xml_string);
  $dates = array();
  foreach ($xml->date as $date) {
    $dates[] = array(
      'id' => (string) $date->id,
      'date' => (string) $date->date,
      'time' => (string) $date->time,
      'endtime' => (string) $date->endtime,
    );
  }
  return $dates;
}

/**
 * Implements hook_form_alter().
 */
function thisted_event_import_form_alter(&$form, &$form_state, $form_id) {
  if ('ding_event_node_form' == $form_id) {
    $form['#node']->field_ding_event_date[LANGUAGE_NONE][0]['timezone_db'] = 'Europe/Copenhagen';
  }
}

/**
 * Implements hook_node_delete().
 */
function thisted_event_import_node_delete($node) {
  db_delete('thisted_event_dates')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_view_alter().
 */
function thisted_event_import_node_view_alter(&$build) {
  if ($build['#entity_type'] == 'node' && $build['#bundle'] == 'ding_event') {
    $price = db_select('thisted_event_dates', 't')
      ->fields('t', array('price'))
      ->condition('t.nid', $build['field_place2book']['#object']->nid)
      ->execute()
      ->fetchField();
    if ($price) {
      $build['place2book_event_prices'] = "<p><i class='icon-tag'></i>{$price} kr.</p>";
    }
  }
}
